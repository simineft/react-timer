{"ast":null,"code":"var _jsxFileName = \"/home/simin/Projcts/react-lessons/app-timer/src/components/timerCounter.js\";\nimport React, { Component } from \"react\";\nexport default class Timer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      timer: 0,\n      backward: false,\n      value: ''\n    };\n\n    this.tick = () => {\n      let {\n        timer,\n        backward\n      } = this.state;\n      let next;\n\n      if (backward === true) {\n        next = timer - 1;\n      } else {\n        next = timer + 1;\n      }\n\n      if (next === 10 || next === 0) {\n        backward = next === 10;\n        this.setState({\n          timer: next,\n          backward\n        });\n      } else {\n        this.setState({\n          timer: next\n        });\n      }\n    };\n\n    this.handleKeyPress = e => {\n      if (e.charCode === 13) {\n        this.setState({\n          timer: parseInt(e.target.value)\n        });\n      }\n\n      console.log(e.target.value);\n    };\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(this.tick, 1000);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onKeyPress: this.handleKeyPress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), this.s, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"  \", !this.state.timer ? this.handleKeyPress() : this.state.timer, \" \"));\n  }\n\n}","map":{"version":3,"sources":["/home/simin/Projcts/react-lessons/app-timer/src/components/timerCounter.js"],"names":["React","Component","Timer","state","timer","backward","value","tick","next","setState","handleKeyPress","e","charCode","parseInt","target","console","log","componentDidMount","interval","setInterval","render","s"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,eAAe,MAAMC,KAAN,SAAoBD,SAApB,CAA8B;AAAA;AAAA;AAAA,SACzCE,KADyC,GACjC;AACJC,MAAAA,KAAK,EAAE,CADH;AAEJC,MAAAA,QAAQ,EAAE,KAFN;AAGJC,MAAAA,KAAK,EAAC;AAHF,KADiC;;AAAA,SAQzCC,IARyC,GAQlC,MAAM;AACT,UAAI;AAAEH,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAsB,KAAKF,KAA/B;AACA,UAAIK,IAAJ;;AACA,UAAIH,QAAQ,KAAK,IAAjB,EAAuB;AACnBG,QAAAA,IAAI,GAAGJ,KAAK,GAAG,CAAf;AACH,OAFD,MAEO;AACHI,QAAAA,IAAI,GAAGJ,KAAK,GAAG,CAAf;AACH;;AACD,UAAII,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,CAA5B,EAA+B;AAC3BH,QAAAA,QAAQ,GAAGG,IAAI,KAAK,EAApB;AACA,aAAKC,QAAL,CAAc;AAAEL,UAAAA,KAAK,EAAEI,IAAT;AAAeH,UAAAA;AAAf,SAAd;AACH,OAHD,MAGO;AACH,aAAKI,QAAL,CAAc;AAAEL,UAAAA,KAAK,EAAEI;AAAT,SAAd;AACH;AACJ,KAtBwC;;AAAA,SA+BzCE,cA/ByC,GA+BvBC,CAAD,IAAO;AACpB,UAAIA,CAAC,CAACC,QAAF,KAAe,EAAnB,EAAuB;AACnB,aAAKH,QAAL,CAAc;AACVL,UAAAA,KAAK,EAACS,QAAQ,CAACF,CAAC,CAACG,MAAF,CAASR,KAAV;AADJ,SAAd;AAGH;;AAGDS,MAAAA,OAAO,CAACC,GAAR,CAAYL,CAAC,CAACG,MAAF,CAASR,KAArB;AAEH,KAzCwC;AAAA;;AA0BzCW,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,QAAL,GAAgBC,WAAW,CAAC,KAAKZ,IAAN,EAAY,IAAZ,CAA3B;AAEH;;AAiBDa,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,UAAU,EAAE,KAAKV,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEK,KAAKW,CAFV,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAW,CAAC,KAAKlB,KAAL,CAAWC,KAAZ,GAAmB,KAAKM,cAAL,EAAnB,GAA0C,KAAKP,KAAL,CAAWC,KAAhE,MAJJ,CADJ;AAQH;;AAvDwC","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Timer extends Component {\n    state = {\n        timer: 0,\n        backward: false,\n        value:''\n       \n\n    }\n    tick = () => {\n        let { timer, backward } = this.state;\n        let next;\n        if (backward === true) {\n            next = timer - 1;\n        } else {\n            next = timer + 1;\n        }\n        if (next === 10 || next === 0) {\n            backward = next === 10;\n            this.setState({ timer: next, backward })\n        } else {\n            this.setState({ timer: next })\n        }\n    }\n\n\n\n    componentDidMount() {\n        this.interval = setInterval(this.tick, 1000);\n\n    }\n\n    handleKeyPress = (e) => {\n        if (e.charCode === 13) {\n            this.setState({ \n                timer:parseInt(e.target.value ),\n            })\n        }\n\n\n        console.log(e.target.value);\n\n    }\n\n \n\n\n    render() {\n        return (\n            <div>\n                <input onKeyPress={this.handleKeyPress}    />\n                {this.s}\n                <br />\n                <strong>  {!this.state.timer? this.handleKeyPress(): this.state.timer   } </strong>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}